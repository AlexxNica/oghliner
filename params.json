{"name":"Oghliner","tagline":"template and tool for deploying Offline Web Apps to GitHub Pages","body":"Oghliner is an experimental template and tool for deploying Offline Web Apps to GitHub Pages.\r\n\r\nAs a template, Oghliner can be used to bootstrap an offline app that deploys to your GitHub Pages site. As a tool, Oghliner adds offlining and deployment into your existing app.\r\n\r\nUsing The Template\r\n------------------\r\n\r\nTo bootstrap an offline web app, fork this repository on GitHub, clone the fork to your local machine, and `npm install`. If you don't have [gulp](http://gulpjs.com/) installed, also `npm install -g gulp`.\r\n\r\nThen `gulp && gulp deploy` to build your app and deploy it to GitHub Pages. Your app will appear at https://*your-GitHub-username*.github.io/oghliner/. For example, if @mykmelez forks the repository to https://github.com/mykmelez/oghliner/, then the app will deploy to https://mykmelez.github.io/oghliner/.\r\n\r\nTo deploy to a different subdirectory of your GitHub Pages site, rename the repository in its Settings. For example, if @mykmelez renames the repository to *eggtimer*, then the app will deploy to https://mykmelez.github.io/eggtimer/.\r\n\r\nGitHub doesn't let you fork a repository to the same account more than once, so to bootstrap a second offline web app, [create a new repository in GitHub](https://github.com/new), clone it locally, `git pull https://github.com/mozilla/oghliner.git master`, and `git push`. For example, if @mykmelez creates the repository https://github.com/mykmelez/test-app/, then he would bootstrap it via:\r\n\r\n```bash\r\n> git clone git@github.com:mykmelez/test-app.git\r\nCloning into 'test-app'...\r\nwarning: You appear to have cloned an empty repository.\r\nChecking connectivity... done.\r\n> cd test-app\r\n> git pull https://github.com/mozilla/oghliner.git master\r\n…\r\nFrom https://github.com/mozilla/oghliner\r\n * branch            master     -> FETCH_HEAD\r\n> git push\r\n…\r\nTo git@github.com:mykmelez/test-app.git\r\n * [new branch]      master -> master\r\n```\r\n\r\nAnd then deploy it via `npm install && gulp && gulp deploy`.\r\n\r\nThis is also the recommended approach if you intend to contribute changes to Oghliner (even if you only intend to create a single app). In that case, fork the repository for the changes you intend to contribute, and create new repositories for your apps.\r\n\r\nThe template puts assets in *app/* and includes a simple *gulpfile.js* that builds to *dist/*, but you can modify the build any way you like. Invoke `gulp` to rebuild your app and regenerate the script that offlines it. Invoke `gulp deploy` to publish it to GitHub Pages.\r\n\r\nUsing The Tool\r\n--------------\r\n\r\nTo integrate offlining and deployment into your existing app, `npm install --save oghliner`. Then add tasks to your *gulpfile.js* which call *oghliner.offline* and *offline.deploy*:\r\n\r\n```js\r\nvar oghliner = require('oghliner');\r\n\r\ngulp.task('offline', function(callback) {\r\n  oghliner.offline({\r\n    rootDir: 'dist',\r\n    fileGlobs: [\r\n      '**/*.html',\r\n      'js/**/*.js',\r\n    ],\r\n  }, callback);\r\n});\r\n\r\ngulp.task('deploy', function(callback) {\r\n  oghliner.deploy({\r\n    rootDir: 'dist',\r\n  }, callback);\r\n});\r\n```\r\n\r\n*oghliner.offline* regenerates the script that offlines your app. It takes a *config* object and a *callback*. The properties of the *config* object are:\r\n- *rootDir*, to specify the directory in which your files are built (default: `.`);\r\n- *fileGlobs*, to specify the files to offline (default: `['**/*']`). The files in *fileGlobs* are matched inside *rootDir*;\r\n- *importScripts*, to specify additional scripts to include in the service worker script (default: `[]`). This is useful, for example, when you want to use the [Push API](https://developer.mozilla.org/en-US/docs/Web/API/Push_API).\r\n\r\n*oghliner.deploy* deploys your files to GitHub Pages. It takes a *config* object and a *callback*. Use *rootDir* to specify the directory in which your files are built (default: `.`). \r\n\r\nFinally, in order for the offline cache to be registered, you need to load the offline manager script in your app by copying it to the location of your other scripts:\r\n\r\n```bash\r\ncp node_modules/oghliner/app/js/offline-manager.js path/to/your/js/files/\r\n```\r\n\r\nAnd then loading it in the app's the HTML file(s):\r\n\r\n```html\r\n<script src=\"path/to/your/js/files/offline-manager.js\"></script>\r\n```\r\n\r\nAutomatic Deployment Via Travis\r\n-------------------------------\r\n\r\nOghliner can configure a repository to automatically deploy to GitHub Pages whenever you push to its *master* branch. Auto-deploy uses [Travis CI](https://travis-ci.org/), a continuous integration service. Oghliner takes care of most of the steps to configure your repository to auto-deploy via Travis.\r\n\r\nIf you bootstrapped your app from the template, your repository already has a suitable Travis configuration file (.travis.yml) and a *configure* task in gulpfile.js. Just `gulp configure` to configure your repository.\r\n\r\nIf you integrated the tool into an existing app, `npm install -g oghliner && oghliner configure` to configure your repository.\r\n\r\nOghliner will prompt you for your GitHub credentials in order to create a token that authorizes Travis to push changes to your repository. The token will give Travis limited access to your GitHub account. Specifically: it will have the *public_repo* [scope](https://developer.github.com/v3/oauth/#scopes), which gives it \"read/write access to code, commit statuses, collaborators, and deployment statuses for public repositories and organizations.\"\r\n\r\nAfter configuring the repository, add and commit the changes to *.travis.yml* and push the *master* branch to the *origin* remote on GitHub to make Travis build and auto-deploy your app:\r\n\r\n```bash\r\n> git commit -m\"configure Travis to auto-deploy to GitHub Pages\" .travis.yml\r\n> git push origin master\r\n```\r\n\r\nYou can see the status of a build/deployment at https://travis-ci.org/*your-GitHub-username*/*your-repository-name*/builds. For example, the status of builds for https://github.com/mykmelez/eggtimer/ is at https://travis-ci.org/mykmelez/eggtimer/builds.\r\n\r\nIf the build was successful, Travis will deploy the site via `gulp deploy`. Expand the log entry to see details about the deployment:\r\n\r\n```bash\r\n$ [ \"${TRAVIS_PULL_REQUEST}\" = \"false\" ] && [ \"${TRAVIS_BRANCH}\" = \"master\" ] && gulp deploy\r\n[23:34:13] Using gulpfile ~/build/mykmelez/eggtimer/gulpfile.js\r\n[23:34:13] Starting 'deploy'...\r\n[23:34:15] Finished 'deploy' after 1.96 s\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}